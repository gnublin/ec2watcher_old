#!/bin/bash
#
# /etc/init.d/ec2watcher -- startup script for monitor ec2 interface instance
#
# Written by Gauthier FRANCOIS gauthier@openux.org
#
### BEGIN INIT INFO
# Provides:          ec2watcher
# Required-Start:    $network $remote_fs $named
# Required-Stop:     $network $remote_fs $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts ec2watcher
# Description:       Starts ec2watcher using start-stop-daemon
### END INIT INFO



PATH=/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin
NAME=ec2watcher
DESC="EC2 interface watcher"
DEFAULT=/etc/default/ec2watcher
EC2W_HOME=/usr/lib/ec2watcher
EC2W_DAEMON=$EC2W_HOME/ec2watcher

INST_NAME=`echo $0 | awk -F - '{print $2}'` 
LOG_FILE=/var/log/ec2watcher-$INST_NAME.log
PID_FILE=/var/run/ec2watcher-$INST_NAME.pid

INTERVAL=2

if [ -z $INST_NAME ]
then
    echo -e "You should create a symbolic link like ec2watcher-w.x.y.z\n\t ex : ln -s /etc/init.d/ec2watcher /etc/init.d/ec2watcher-your.public.i.p"
    exit 1 
elif [[ ! "$INST_NAME" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]
then
    echo "You $INST_NAME is not a valid IP address"
    exit 1 
fi


# The first existing directory is used for JAVA_HOME (if JAVA_HOME is not defined in $DEFAULT)
JDK_DIRS="/usr/lib/jvm/java-7-oracle /usr/lib/jvm/java-7-openjdk /usr/lib/jvm/java-7-openjdk-amd64/ /usr/lib/jvm/java-7-openjdk-i386/ /usr/lib/jvm/java-6-sun /usr/lib/jvm/java-6-openjdk /usr/lib/jvm/java-6-openjdk-amd64 /usr/lib/jvm/java-6-openjdk-i386 /usr/lib/jvm/default-java"

# Look for the right JVM to use
for jdir in $JDK_DIRS; do
    if [ -r "$jdir/bin/java" -a -z "${JAVA_HOME}" ]; then
        JAVA_HOME="$jdir"
    JAVA=$JAVA_HOME/bin/java
    fi
done
export JAVA_HOME


if [ `id -u` -ne 0 ]; then
    echo "You need root privileges to run this script"
    exit 1
fi


. /lib/lsb/init-functions

if [ -r /etc/default/rcS ]; then
    . /etc/default/rcS
fi


if [ -f "$DEFAULT" ]
then
    . "$DEFAULT"
fi

if [ ! -f $LOG_FILE ]
then
    touch $LOG_FILE
fi

if [ "$START_DAEMON" != "yes" ]
then
    echo "Please edit the $DEFAULT configuration file and change the START_DAEMON value to yes"
    exit 1;
fi

checkJava() {
    if [ -x "$JAVA_HOME/bin/java" ]; then
        JAVA="$JAVA_HOME/bin/java"
    else
        JAVA=$(which java)
    fi

    if [ ! -x "$JAVA" ]; then
        echo "Could not find any executable java binary. Please install java in your PATH or set JAVA_HOME"
        exit 1
    fi
}

case "$1" in
  start)
    checkJava
    log_daemon_msg "Starting $DESC for $INST_NAME"
    pid=`pgrep -f "$EC2W_DAEMON $INST_NAME"`
    if [ -n "$pid" ] ; then
        log_progress_msg "(already running)"
        log_end_msg 0
        echo "PID: "`cat $PID_FILE`
        exit 0
    fi

    # Start Daemon
    start-stop-daemon --start -b --pidfile $PID_FILE --make-pid --name "toto" --exec $EC2W_DAEMON $INST_NAME $INTERVAL
    log_end_msg " $? "
    ;;      
  stop)
    log_daemon_msg "Stopping $DESC for $INST_NAME"

    if [ -f "$PID_FILE" ]; then 
        start-stop-daemon --stop --pidfile $PID_FILE --retry=TERM/20/KILL/5 
        if [ $? -eq 1 ]; then
            log_progress_msg "$DESC for $INST_NAME is not running but pid file exists, cleaning up"
        elif [ $? -eq 3 ]; then
            PID="`cat $PID_FILE`"
            log_failure_msg "Failed to stop $DESC for $INST_NAME (pid $PID)"
            exit 1
        fi
        rm -f "$PID_FILE"
    else
        log_progress_msg "(not running)"
    fi
    log_end_msg 0
    ;;
  status)
    status_of_proc -p $PID_FILE && exit 0 || exit $?
    ;;
  restart|force-reload)
    if [ -f "$PID_FILE" ]; then
        $0 stop
        sleep 1
    fi
    $0 start
    ;;
  *)
    log_success_msg "Usage: $0 {start|stop|restart|force-reload|status}"
    exit 1
    ;;
esac

exit 0












